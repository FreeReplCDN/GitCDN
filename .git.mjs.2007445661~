import { Octokit } from "octokit";
const { GITHUB_TOKEN } = process.env;

// Octokit.js
// https://github.com/octokit/core.js#readme
const octokit = new Octokit({
  auth: GITHUB_TOKEN
});

// Base tree SHA for repository
async function _getTreeSHA(owner, repo, branch="master") {
  let response;
  response = await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}', {
    owner: owner,
    repo: repo,
    branch: branch
  });
  return response.data.commit.commit.tree.sha;
}

// Internal method for writing files NOTNEEDED
async function _writeFile(owner, repo, file, content, sha=null) {
  let response;
  response = await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner: owner,
    repo: repo,
    path: file,
    message: 'File Update',
    committer: {
      name: 'FreeReplCDN Automated Tasks',
      email: '93660666+py660@users.noreply.github.com'
    },
    content: btoa(content),
    headers: {
      'X-GitHub-Api-Version': '2022-11-28'
    },
    sha: sha
  });
  console.log(response)
}

// PUBLIC METHODS

// List files under a tree SHA
async function listFiles(owner, repo, path, full=false) {
  let response;
  let treesha = await _getTreeSHA(owner, repo, "master");
  response = await octokit.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {
    owner: owner,
    repo: repo,
    tree_sha: treesha,
    headers: {
      'X-GitHub-Api-Version': '2022-11-28'
    },
    recursive: true
  });
  if (full) return response.data.tree;
  console.log(path)
  if (path.slice(-1) == "/"){
    path = path.slice(0, -1);
  }
  let tree = response.data.tree;
  console.log(path);
  return tree.filter(file => file.path.startsWith(path ? path + "/" : ""));
}

// Get the target file for production use via githack
async function getFile(owner, repo, path){
  const response = await fetch(`https://raw.githubusercontent.com/${owner}/${repo}/master/${path}`);
  console.log(response.body());
}

//await writeFile("FreeReplCDN", "testRepo", "new.txt", "can you see this?")

//let rootTreeSHA = await _getTreeSHA("py660", "PyChat", "master");
//console.log(rootTreeSHA);
//let files = await listFiles("py660", "PyChat", "py");
//console.log(files)
console.log('1')
await getFile("py660", "PyChat", "py/login.py");

console.log("EOF")
//beware of ratelimits
export { listFiles }

